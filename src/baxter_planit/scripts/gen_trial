#!/usr/bin/env python

import sys
import copy
from math import pi, tau
from random import uniform, choice, shuffle
import time

import numpy as np

import rospy
from tf.transformations import *
from std_srvs.srv import Empty
# from geometry_msgs.msg import Twist
from gazebo_msgs.msg import ModelStates, ModelState
from moveit_commander.conversions import *

count = 0
outfile = None
updatePeriod = 0.5
lastUpdateTime = None
init_states_pub = None

# don't mess with these objects
ignore = {'ground_plane', 'table', 'baxter', 'kinect'}


# random orientation generator
def new_directions():
    return {
        'cylinder_red': [choice([0, tau / 4]), 0, choice(np.linspace(0, tau, 9)[:-1])],
        'wood_cube': [0, 0, choice(np.linspace(0, tau, 9)[:-1])],
        '003_cracker_box_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '004_sugar_box_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '005_tomato_soup_can_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '006_mustard_bottle_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '007_tuna_fish_can_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '008_pudding_box_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '009_gelatin_box_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '010_potted_meat_can_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '011_banana_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '021_bleach_cleanser_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '025_mug_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '030_fork_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '031_spoon_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '032_knife_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '033_spatula_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '035_power_drill_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '037_scissors_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
        '040_large_marker_textured': [choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1]),choice(np.linspace(0, tau, 9)[:-1])],
    }

directions = new_directions()

# randomize object positions
positions = [
    # table positions:
    [.75, -.4, 1.08],
    [.75, 0, 1.08],
    [.75, .4, 1.08],
    # offscreen positions:
    [9.5, -9.5, .03],
    [9.5, -8.5, .03],
    [9.5, -7.5, .03],
    [9.5, -6.5, .03],
    [9.5, -5.5, .03],
    [9.5, -4.5, .03],
    [9.5, -3.5, .03],
    [9.5, -2.5, .03],
    [9.5, -1.5, .03],
    [9.5, -0.5, .03],
    [9.5, 0.5, .03],
    [9.5, 1.5, .03],
    [9.5, 2.5, .03],
    [9.5, 3.5, .03],
    [9.5, 4.5, .03],
]
shuffle(positions)


def on_model_states_msg(msg):
    global count
    global outfile
    global lastUpdateTime
    sinceLastUpdateDuration = rospy.get_rostime() - lastUpdateTime
    if sinceLastUpdateDuration.to_sec() < updatePeriod:
        return
    lastUpdateTime = rospy.get_rostime()

    if count > 1:
        return

    pos_ind = 0
    for (model_name, model_pose) in zip(msg.name, msg.pose):
        if model_name not in ignore:
            print(model_name, model_pose)
            new_msg = ModelState()
            new_msg.model_name = model_name
            new_msg.reference_frame = "world"
            new_msg.pose = copy.deepcopy(model_pose)
            new_msg.pose.orientation
            # x = choice(np.linspace(tau, -tau, 9)[:-1])
            # y = choice(np.linspace(tau, -tau, 9)[:-1])
            # z = choice(np.linspace(tau, -tau, 9)[:-1])
            # print(directions[model_name])
            q = quaternion_from_euler(*directions[model_name])
            new_msg.pose.orientation.x = q[0]
            new_msg.pose.orientation.y = q[1]
            new_msg.pose.orientation.z = q[2]
            new_msg.pose.orientation.w = q[3]
            # new_msg.pose.position.z += 0.001
            # new_msg.pose.position.x = uniform(.55, .99)
            # new_msg.pose.position.x += choice([0,0.05, -0.05])
            # new_msg.pose.position.y += choice([0,0.05, -0.05])
            new_msg.pose.position.x = positions[pos_ind][0]
            new_msg.pose.position.y = positions[pos_ind][1]
            new_msg.pose.position.z = positions[pos_ind][2]
            # print(new_msg)
            if count == 1 and positions[pos_ind][2] > 1:
                if outfile is None:
                    continue
                print(
                    model_name,
                    positions[pos_ind][0],
                    positions[pos_ind][1],
                    positions[pos_ind][2],
                    q[0],
                    q[1],
                    q[2],
                    q[3],
                    sep=',',
                    file=outfile
                )
            pos_ind += 1
            init_states_pub.publish(new_msg)

    count += 1


def main():
    global count
    global outfile
    global directions
    global lastUpdateTime
    global init_states_pub

    rospy.init_node('gazebo_rand_instance')
    init_states_pub = rospy.Publisher('/gazebo/set_model_state', ModelState, queue_size=10)
    lastUpdateTime = rospy.get_rostime()
    rospy.Subscriber('/gazebo/model_states', ModelStates, on_model_states_msg)
    image_save = rospy.ServiceProxy('/image_saver/save', Empty)
    # msg = rospy.wait_for_message('/gazebo/model_states', ModelStates)
    # rospy.sleep(rospy.Duration(0, 100 * 1000))
    # rospy.loginfo('Spinning')

    # ignore very first message
    while count < 1:
        rospy.Rate(10).sleep()

    try:
        first = int(sys.argv[1])
    except:
        first = 0

    try:
        num_exp = int(sys.argv[2])
    except:
        num_exp = first + 1

    for i in range(first, num_exp):
        outfile = open(f"experiments/exp{i:04d}.csv", "w")

        # first orientation
        print("object,px,py,pz,qx,qy,qz,qw", file=outfile)
        count = 1
        directions = new_directions()
        while count < 2:
            rospy.Rate(10).sleep()

        # capture screen and data
        input()
        image_save()

        # # second orientation
        # print("object,px1,py1,pz1,ox1,oy1,oz1,ow1", file=outfile)
        # count = 1
        # directions = new_directions()
        # while count < 2:
        #     rospy.Rate(10).sleep()

        # # capture screen and data again
        # input()
        # image_save()

        outfile.close()


if __name__ == '__main__':
    main()
