#!/usr/bin/env python

import sys
import time
from math import pi, tau

import rospy
from planit.msg import PercievedObject
from baxter_planit import BaxterPlanner
from moveit_commander.conversions import *

app_dist = 0.1


def graspTest():
    global planner
    is_sim = sys.argv[1] != 'false' if len(sys.argv) > 1 else True
    planner = BaxterPlanner(is_sim)
    if is_sim:
        print("Test?")
        time.sleep(1)
        planner.testScene()
        print("Test!")
    else:
        perception_sub = rospy.Subscriber('/perception', PercievedObject, planner.scene.updatePerception)
    time.sleep(2)

    chirality = 'left'

    ### pick up red cylinder ###
    planner.pick(
        'cylinder_red__linkcollision',
        v_scale=0.25,
        a_scale=1.0,
        grasping_group=chirality + "_hand",
        group_name=chirality + "_arm",
    )

    ### place red cylinder next to plate, on the left ###
    planner.place(
        'cylinder_red__linkcollision',
        [0.6, 0.06, 1.15],
        v_scale=0.25,
        a_scale=1.0,
        grasping_group=chirality + "_hand",
        group_name=chirality + "_arm",
    )

    chirality = 'right'

    ### pick up blue cylinder ###
    planner.pick(
        'cylinder_blue__linkcollision',
        v_scale=0.25,
        a_scale=1.0,
        grasping_group=chirality + "_hand",
        group_name=chirality + "_arm",
    )

    ### place blue cylinder next to the plate on the right ###
<<<<<<< HEAD
    planner.place(
        'cylinder_blue__linkcollision',
        [0.6, -0.06, 1.15],
        v_scale=0.25,
        a_scale=1.0,
        grasping_group=chirality + "_hand",
        group_name=chirality + "_arm",
    )
=======
    place_poses = planner.grasps.get_simple_placements([0.6, -0.06, 1.15])
    success, plan, planning_time, error_code = planner.plan_ee_poses(place_poses, group_name=chirality + '_arm')
    # success, plan, planning_time, error_code = planner.plan_ee_pose(
    #     list_to_pose([0.6, -0.06, 1.15, -tau / 4, tau / 4, 0]), group_name=chirality + '_arm'
    # )
    print(success, planning_time, error_code)
    if not success:
        return
    planner.execute(plan, v_scale=0.25, group_name=chirality + '_arm')
    print("Preplaced")
    planner.do_end_effector('open', group_name=chirality + '_hand')
    print("Gripper Opened")
    success = planner.detach('cylinder_blue__linkcollision', group_name=chirality + "_arm")
    print("Object detached:", success)
    plan, fraction = planner.plan_line_traj([0, 0, 1], app_dist, group_name=chirality + '_arm', avoid_collisions=True)
    print("PostPlace", fraction)
    if fraction < 0.5:
        return
    planner.execute(plan, v_scale=0.125, group_name=chirality + '_arm')
    print("PostPlaced", fraction)

    ### pick up purple block ###
    #planner.pick(
    #     'stone_10_2_5_1cm_0__linkcollision',
    #    v_scale=0.25,
    #     a_scale=1.0,
    #     grasping_group=chirality + "_hand",
    #     group_name=chirality + "_arm"
    # )

    # ### place purple block on the plate ###
    # place_poses = planner.grasps.get_simple_placements([0.6, 0, 1.15])
    # success, plan, planning_time, error_code = planner.plan_ee_poses(place_poses, group_name=chirality + '_arm')
    # print(success, planning_time, error_code)
    # if not success:
    #     return
    # planner.execute(plan, v_scale=0.25, group_name=chirality + '_arm')
    # print("Preplaced")
    # planner.do_end_effector('open', group_name=chirality + '_hand')
    # print("Gripper Opened")
    # success = planner.detach('stone_10_2_5_1cm_0__linkcollision', group_name=chirality + "_arm")
    # print("Object detached:", success)
    # plan, fraction = planner.plan_line_traj([0, 0, 1], app_dist, group_name=chirality + '_arm', avoid_collisions=True)
    # print("PostPlace", fraction)
    # if fraction < 0.5:
    #     return
    # planner.execute(plan, v_scale=0.125, group_name=chirality + '_arm')
    # print("PostPlaced", fraction)
>>>>>>> 6f32c502a68ea897895736a1c6eb1b3066e05367


if __name__ == '__main__':
    rospy.init_node("baxter_planit", anonymous=False)
    graspTest()
    rospy.spin()
